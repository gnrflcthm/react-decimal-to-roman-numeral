{"version":3,"sources":["Input.js","converter/index.js","App.js","reportWebVitals.js","index.js"],"names":["Input","value","onChange","isOverflow","className","e","target","ROMAN_NUMERALS","parseNumeral","num","index","undefined","toString","Math","pow","repeat","toRomanNumeral","split","reverse","map","temp","parseInt","join","App","useState","setValue","isEmpty","toggleEmptyMessage","toggleOverflow","useEffect","props","useSpring","val","from","emptyValueProps","useTransition","y","opacity","enter","leave","position","top","style","height","isNaN","span","to","x","floor","splice","length","item","div","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1f73c46.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Input.css'\r\n\r\nconst Input = ({value, onChange, isOverflow}) => {\r\n    return (\r\n        <div>\r\n            <input className={`number-input form-control text-center ${isOverflow ? 'is-invalid' : ''}`} value={value} onChange={(e) => onChange(e.target.value)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","const ROMAN_NUMERALS = {\r\n    1: \"I\",\r\n    4: \"IV\",\r\n    5: \"V\",\r\n    9: \"IX\",\r\n    10: \"X\",\r\n    40: \"XL\",\r\n    50: \"L\",\r\n    90: \"XC\",\r\n    100: \"C\",\r\n    400: \"CD\",\r\n    500: \"D\",\r\n    900: \"CM\",\r\n    1000: \"M\",\r\n};\r\n\r\nfunction parseNumeral(num, index) {\r\n    if (ROMAN_NUMERALS[num.toString()] === undefined) {\r\n        if (num < 4 * Math.pow(10, index)) {\r\n            return ROMAN_NUMERALS[Math.pow(10, index).toString()].repeat(\r\n                num / Math.pow(10, index)\r\n            );\r\n        } else if (num > Math.pow(10, index) * 5) {\r\n            return (\r\n                ROMAN_NUMERALS[(Math.pow(10, index) * 5).toString()] +\r\n                ROMAN_NUMERALS[Math.pow(10, index).toString()].repeat(\r\n                    num / Math.pow(10, index) - 5\r\n                )\r\n            );\r\n        }\r\n    } else {\r\n        return ROMAN_NUMERALS[num.toString()];\r\n    }\r\n}\r\n\r\nexport const toRomanNumeral = (num) => {\r\n    const numString = num.toString().split(\"\").reverse();\r\n    var numeralString = numString.map((num, index) => {\r\n        let temp = parseInt(num * Math.pow(10, index));\r\n        if (temp === 0) {\r\n            return \"\";\r\n        }\r\n        if (temp < 4000) {\r\n            return parseNumeral(temp, index);\r\n        } else {\r\n            return parseNumeral(temp / 1000, index - 3) + \"`\";\r\n        }\r\n    });\r\n    return numeralString.reverse().join(\"\");\r\n};\r\n","import \"./App.css\";\nimport Input from \"./Input\";\nimport { useState, useEffect } from \"react\";\nimport { useSpring, useTransition, animated } from \"react-spring\";\nimport { toRomanNumeral } from \"./converter\";\n\nconst EMPTY_MESSAGE =\n    'The number zero did not originally have its own Roman numeral, but the word nulla (the Latin word meaning \"none\") was used by medieval scholars to represent 0';\n\nfunction App() {\n    const [value, setValue] = useState(0);\n    const [isEmpty, toggleEmptyMessage] = useState(value === 0);\n    const [isOverflow, toggleOverflow] = useState(value >= 4000000);\n\n    const handleInputChange = (val) => {\n        if (val > 3999999) {\n            toggleOverflow(true);\n            return;\n        } else {\n            toggleOverflow(false);\n            setValue(val === \"\" ? 0 : !isNaN(val) ? parseInt(val) : value);\n        }\n    };\n\n    useEffect(() => {\n        toggleEmptyMessage(value === 0);\n    }, [value]);\n\n    const props = useSpring({ val: value, from: { val: 0 } });\n    const emptyValueProps = useTransition(isEmpty, {\n        from: { y: -20, opacity: 0 },\n        enter: { y: 0, opacity: 1 },\n        leave: { y: 20, opacity: 0, position: \"absolute\", top: 0 },\n    });\n\n    return (\n        <div\n            className=\"container d-flex justify-content-start flex-column align-content-center w-100 p-4\"\n            style={{ height: \"100vh\" }}\n        >\n            <div className=\"row justify-content-center\">\n                <div className=\"col-12 col-md-6 title-wrapper mb-3\">\n                    <h2 className=\"text-center heading\">\n                        Roman Numeral Converter\n                    </h2>\n                </div>\n            </div>\n            <div className=\"row justify-content-center\">\n                <div className=\"col-12 col-md-6 input-wrapper mb-3\">\n                    <Input\n                        value={value}\n                        onChange={handleInputChange}\n                        isOverflow={isOverflow}\n                    />\n                    {isOverflow && (\n                        <small className=\"text-danger d-block position-absolute text-center\">\n                            Can only parse numbers between 0 and 4,000,000.\n                        </small>\n                    )}\n                </div>\n            </div>\n            <div className=\"output-wrapper row d-flex justify-content-center flex-grow-1\">\n                {!isEmpty && (\n                    <div className=\"d-flex justify-content-center text-wrap\">\n                        <p className=\"text-center align-self-center formatted-output\">\n                            <animated.span\n                                style={props}\n                                className=\"space-top bar\"\n                            >\n                                {props.val.to((x) => {\n                                    let temp = toRomanNumeral(\n                                        Math.floor(x)\n                                    ).split(\"`\");\n                                    return temp\n                                        .splice(0, temp.length - 1)\n                                        .join(\"\");\n                                })}\n                            </animated.span>\n                            <animated.span style={props} className=\"space-top\">\n                                {props.val.to((x) => {\n                                    let temp = toRomanNumeral(\n                                        Math.floor(x)\n                                    ).split(\"`\");\n                                    return temp[temp.length - 1];\n                                })}\n                            </animated.span>\n                        </p>\n                    </div>\n                )}\n                {emptyValueProps((style, item) => {\n                    return (\n                        item && (\n                            <animated.div\n                                style={style}\n                                className=\"col-12 cold-md-4 text-secondary\"\n                            >\n                                <>\n                                    <h5 className=\"text-center\">\n                                        <b>Did You Know:</b>\n                                    </h5>\n                                    <h5 className=\"text-center\">\n                                        {EMPTY_MESSAGE}\n                                    </h5>\n                                </>\n                            </animated.div>\n                        )\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nreportWebVitals();\n"],"sourceRoot":""}